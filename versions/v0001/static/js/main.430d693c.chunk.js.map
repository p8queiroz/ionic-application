{"version":3,"sources":["components/answer/Answer.js","components/question/Question.js","components/questionFilter/QuestionFilter.js","components/questionList/QuestionList.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Answer","_answer","Fragment","dangerouslySetInnerHTML","__html","Question","question","React","useState","isOpened","setIsOpened","description","answer","toggle","className","onClick","alert","QuestionFilter","callback","id","onChange","value","QuestionList","_questions","questions","setQuestions","filter","technology","localStorage","getItem","level","item","event","target","setItem","map","key","Footer","App","setQuestion","isLoading","setLoading","useEffect","fetch","method","mode","cache","headers","then","response","json","data","catch","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.430d693c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Answer = ({ _answer }) => {\r\n\r\n    const answerhtml = () => {\r\n        return { __html: _answer };\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div dangerouslySetInnerHTML={answerhtml()}></div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Answer;","import React from 'react';\r\nimport Answer from '../answer/Answer';\r\n\r\nconst Question = ({ question }) => {\r\n\r\n    const [isOpened, setIsOpened] = React.useState(false);\r\n    let { description, answer } = question;\r\n\r\n    const toggle = () => {\r\n        setIsOpened(isOpened => !isOpened);\r\n    }\r\n\r\n    const share = () => alert(\"share this question!\");\r\n\r\n    const descriptionhtml = () => {\r\n        return { __html: description };\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"content\">\r\n                    <div className={'question' + (isOpened ? ' active' : '')} onClick={toggle}>\r\n                        <div className=\"circle-container\">\r\n                            <div className=\"outer circle\">\r\n                                <div className=\"inner circle\">\r\n                                    <div className=\"question-mark\">?</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <p dangerouslySetInnerHTML={descriptionhtml()}></p>\r\n                    </div>\r\n                    <div className=\"options\">\r\n                        <div className=\"answer-option\" onClick={toggle}>\r\n                            <div className=\"chat icon\"></div>\r\n                        </div>\r\n                        <div className=\"social\" onClick={share}>\r\n                            <div className=\"twitter\">\r\n                                <div className=\"retweet icon\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={'answer' + (isOpened ? ' active' : '')}>\r\n                        <Answer _answer={answer}></Answer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Question;","import React from 'react';\r\n\r\nconst QuestionFilter = ({ callback }) => {\r\n\r\n    return (\r\n        <div className=\"filters\">\r\n            <div>\r\n                <span>Technology:</span>\r\n                <select id=\"technology\" onChange={callback}>\r\n                    <option value=\"\"></option>\r\n                    <option value=\"javascript\">javascript</option>\r\n                    <option value=\"react\">React</option>\r\n                    <option value=\"dotnet\">.net</option>\r\n                </select>\r\n            </div>\r\n            {/*<div>\r\n                <span>Category:</span>\r\n                <select id=\"category\" onChange={callback}>\r\n                    <option value=\"\"></option>\r\n                    <option value=\"easy\">easy</option>\r\n                    <option value=\"medium\">medium</option>\r\n                    <option value=\"intermidiate\">intermidiate</option>\r\n                    <option value=\"hard\">hard</option>\r\n                </select>\r\n            </div>*/}\r\n            <div>\r\n                <span>Level:</span>\r\n                <select id=\"level\" onChange={callback}>\r\n                    <option value=\"\"></option>\r\n                    <option value=\"easy\">easy</option>\r\n                    <option value=\"medium\">medium</option>\r\n                    <option value=\"intermidiate\">intermidiate</option>\r\n                    <option value=\"hard\">hard</option>\r\n                </select>\r\n            </div>\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default QuestionFilter;","import React from 'react';\r\nimport Question from '../question/Question';\r\nimport QuestionFilter from '../questionFilter/QuestionFilter';\r\nimport './QuestionList.css';\r\n\r\nconst QuestionList = ({ _questions }) => {\r\n\r\n    const [questions, setQuestions] = React.useState(_questions);\r\n\r\n    const handleSelect = (event) => {\r\n        const { target: { id, value } } = event;\r\n        localStorage.setItem(id, value);\r\n        filter();\r\n    }\r\n\r\n    const filter = () => {\r\n        let technology = localStorage.getItem('technology');\r\n        let level = localStorage.getItem('level');\r\n        setQuestions(_questions.filter(item => (technology ? item.technology === technology : true)).filter(item => (level ? item.level === level : true)));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <QuestionFilter callback={handleSelect}></QuestionFilter>\r\n            <section className=\"cards\">\r\n                {questions.map((question) =>\r\n                    <Question key={question.id} question={question} />\r\n                )}\r\n            </section>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default QuestionList;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"about\">\r\n                Wanna publish your question? email: phqs.phqs [at] gmail\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Footer;","import React, { useEffect } from 'react';\nimport './App.css';\n//import data from './data/data';\nimport QuestionList from './components/questionList/QuestionList';\nimport Footer from './components/footer/Footer';\n\nfunction App() {\n\n  const [questions, setQuestion] = React.useState([]);\n  const [isLoading, setLoading] = React.useState(true);\n\n  useEffect(() => {\n\n    let init = {\n      method: 'GET',\n      mode: 'cors',\n      cache: 'default',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    fetch('http://quizzertech.com/system/wp-json/application-api/v1/om-question', init)\n      .then(response => response.json())\n      .then(data => {\n        setQuestion(data);\n        setLoading(false);\n      })\n      .catch((error) => console.log(error))\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>I.T. Questions and answers for interview / certification</h1>\n      </header>\n      <section className=\"container\">\n        {!isLoading &&\n          <QuestionList _questions={questions} />}\n      </section>\n      <footer>\n        <Footer />\n      </footer>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}